# by default archaius (what we use for configuration stuff) will pull from this file. put base-configuration value here
# (things that would be necessary to bootstrap the camel harness on a workstation)

# demonstrates how to inject connection and stub details for mocking/context-switching calls to external services.
# take care to ensure any bean/processor/connector referenced in a connection string here is named
# (here 'bean:' is not part of the name but a designation of type) the same way in JNDI (see AppContextLifecycle for JNDI
# registration plumbing)
sample.get.service.source.local=bean:sampleGetServiceResponseMockProcessor
sample.get.service.response.mockfile.local=sample_get_service_response_mockfile.json

mqtt.topic.local=mqtt_lab_topic
mqtt.qos.local=2
# whatever port 1883 maps to should go here if in a dockerized context...
mqtt.broker.local=tcp://0.0.0.0:1883
mqtt.producer.route.enabled.local=false
mqtt.consumer.route.enabled.local=true
#mqtt.producer.processor.name.local=vernemqProducerProcessor
#mqtt.consumer.processor.name.local=vernemqConsumerProcessor


# example of how you would pull additional *.properties files into the app.
# these are loaded in an all or nothing fashion. if one of them isn't found or can't be loaded then none of them get into
# the config context TODO this should be fixed in a future version
#additional.properties.source.url.local=file:///config-volume/{{FILE_NAME}}.properties,file:///shared-config-volume/{{FILE_NAME}}.properties, ...
